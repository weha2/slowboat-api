// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gender {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  participant Participant[]
}

model CountryCode {
  id          Int           @id @default(autoincrement())
  name        String
  dialCode    String        @unique
  code        String
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  contact     Contact[]
  participant Participant[]
}

model CountryNationality {
  id          Int           @id @default(autoincrement())
  numCode     String
  alpha2Code  String
  alpha3Code  String
  enShortName String
  nationality String
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  participant Participant[]
}

model Product {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  price     Float
  type      PackageType?
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  order     Order[]
}

model Order {
  id                Int           @id @default(autoincrement())
  invoiceNumber     String        @unique
  productId         Int
  product           Product       @relation(fields: [productId], references: [id])
  quantity          Int
  price             Float
  date              DateTime
  additionalRequest String?
  pickupLocation    String?
  status            PaymentStatus
  statusMessage     String?
  completedAt       DateTime?
  token             String?
  createdAt         DateTime?     @default(now())
  updatedAt         DateTime?     @updatedAt
  contact           Contact?
  participant       Participant[]
}

model Contact {
  id            Int         @id @default(autoincrement())
  orderId       Int         @unique
  order         Order       @relation(fields: [orderId], references: [id])
  lastname      String
  firstname     String
  email         String
  countryCodeId Int
  countryCode   CountryCode @relation(fields: [countryCodeId], references: [id])
  phoneNumber   String
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
}

model Participant {
  id                   Int                 @id @default(autoincrement())
  orderId              Int                 @unique
  order                Order               @relation(fields: [orderId], references: [id])
  lastname             String
  firstname            String
  email                String?
  countryCodeId        Int?
  countryCode          CountryCode?        @relation(fields: [countryCodeId], references: [id])
  phoneNumber          String?
  dateBirth            DateTime?
  genderId             Int?
  gender               Gender?             @relation(fields: [genderId], references: [id])
  countryNationalityId Int?
  countryNationality   CountryNationality? @relation(fields: [countryNationalityId], references: [id])
  passportNumber       String?
  createdAt            DateTime?           @default(now())
  updatedAt            DateTime?           @updatedAt
}

enum PackageType {
  SLOWBOAT
  TRAIN
  BUS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
